component lifecycle

mounting:
	1. created (constructor) 
	2. changes (ngOnChanges)
	3. Init		(ngOnInit)

updation:
	changes

destruction:
	destroy

event name		interface name		method name
-----------------------------------------------------
X				OnX					ngOnX

Init			OnInt				ngOnInit
Changes			OnChanges			ngOnChanges
Destroy			OnDestroy			ngOnDestroy


ASP.NET Core Web API/ ASp.NET MVC Web API/ Springboot/Node JS+Express JS,...................


URL								    HTTP method		Input data								Output
------------------------------------------------------------------------------------------------
http://localhost:3003/products		GET						NA					{"message":"", "data":[]}
http://127.0.0.1:3003/products/{id}	GET				route data: id 			{"message":"", "data": {}}

http://127.0.0.1:3003/products		POST			product object [req body]{"message":"", "data":[]}
http://127.0.0.1:3003/products/{id}	PUT				route data: id, product object [req body]
																					{"message":"", "data":[]}


http://127.0.0.1:3003/products/{id}	DELETE			route data: id 			{"message":"", "data": []}



RESTFul API requests:
HttpClient (HttpClientModule)
	=> .get(url)
	=> .get(url+'/id')
	=> .post(url, pobject)
	=> .put(url+'/id',pobject)
	=> .delete(url+'/id')


class Base{
	constructor(@Inject('') public s:IProductService){
	}
}

class Child extends Base{

	constructor(){
		super()
	}

ngOnInt(){
	
}
}


path							component
--------------------------------------
/								Home
/home							Home

/products						PLC
/products/id					PDC
/products/add					APC
/products/update/id			UPC

**								PNF


Routing framework: @angular/router (RouterModule)
-------------------------------
general classes:
Route => path, component
Routes (Route[]) => store all routes
ActivatedRouteSnapshot


service class:
Router <= Routes
ActivatedRoute

Module:
RouterModule.forRoot(routes array)

directives:
router-outlet: creates an outlet for the routed components to be loaded
routerLink

directives:
	a. component directive (@Component)
	b. structural directive (*ngIf, *ngFor,...)
	c. attribute directive (routerLink, ngClass, ngStyle,...)
















